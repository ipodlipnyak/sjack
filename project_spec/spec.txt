#-- Структура проекта (библиотеки, фреймворки и пр.) --#
Routing, Api:
Slim micro-framework
https://www.slimframework.com/

Basic access authentication:
Slim-basic-auth middleware
https://github.com/tuupola/slim-basic-auth

ORM, Event dispatcher:
Illuminate
https://github.com/illuminate/database
https://laravel.com/docs/5.7/eloquent

Mailer:
PHPMailer
https://github.com/PHPMailer/PHPMailer

Templating engine:
Twig
https://twig.symfony.com/

Frontend:
AdminLTE
https://github.com/almasaeed2010/AdminLTE
Webpack bundler
https://webpack.js.org/
Vue.js framework
https://vuejs.org/

Datamining:
Requests
http://docs.python-requests.org
SQLAlchemy
https://www.sqlalchemy.org/

#-- Общее описание проекта --#
Скрипт на питоне будет проверять состояние сайтов из списка урлов в базе, отправляя им http-реквесты. Ответы сохраняются соответствующим реквестом к restfull api административной панели.
Скрипт стартует крон-задачей. За рассылку http-реквестов отвечает библиотека Requests. Работу с базой данных обеспечивает ORM SQLAlchemy.

Для административной панели используется микрофреймворк Slim. Он особенно удобен при создании restfull api и в будущем его возможности можно будет использовать для координации микросервисов. 
Особенно если вдруг потребуется создание демонов на внешних серверах (их нельзя разворачивать на бегете).

Для авторизации запросов используется HTTP Basic authentication. Все запросы к api также проходят эту аутентификацию. 
Из-за того что передача авторизационных данных идёт открытым текстом необходимо включить https с принудительной переадресацией.

Административная панель содержит три формы:
1. Общие настройки - почтовый адрес для уведомлений, доменное имя сайта, чекбокс для включения https при авторизации
2. Список сайтов - просмотр статусов сайтов, редактирование и удаление сайтов из списка, фильтр для поиска сайтов по имени или урлу
3. Добавление нового сайта - урл, имя, использование https. Опционально - тип авторизации(для начала ограничимся HTTP Basic auth), логин и пароль

В списке сайтов статусы будут подсвечиваться красным (404), оранжевым(301,302) и зеленым(200).
В случае переадресации можно будет просмотреть конечный адрес.

RESTfull api позволяет просматривать (в ответ прийдет application/json) и изменять состояние сайтов из списка в базе.
В момент обновления состояния того или иного сайта, выстреливает событие. Если новый статус ответа 404 - будет отправлено email уведомление на почтовый ящик администратора.

#-- Этапы разработки --#
1. 2ч - Разработка структуры таблиц БД
2. 6ч - Создание структуры проекта и настройка основных модулей
3. 2ч - Создание шаблона главной темы административной панели
4. 2ч - Форма общих настроек
5. 4ч - Форма просмотра списка сайтов
6. 2ч - Форма добавления сайта
7. 4ч - Скрипт для проверки состояния сайтов
8. 6ч - Деплой и тестирование на боевом сервере
